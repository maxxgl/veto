/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export interface AuthSessions {
  expires_at: number;
  id: string;
  user_id: number;
}

export interface Options {
  created_at: Generated<string | null>;
  description: string | null;
  genre: string | null;
  gps_lat: number | null;
  gps_lng: number | null;
  id: Generated<number>;
  name: string;
  rating: number | null;
}

export interface Players {
  created_at: Generated<string | null>;
  gps_lat: number | null;
  gps_lng: number | null;
  id: Generated<number>;
  name: string;
  user_id: string | null;
}

export interface Rounds {
  created_at: Generated<string | null>;
  ended_at: string | null;
  round: number;
  session_uuid: string;
  started_at: Generated<string | null>;
}

export interface Session {
  expires_at: number;
  id: string;
  user_id: string;
}

export interface Sessions {
  created_at: Generated<string | null>;
  gps_lat: number;
  gps_lng: number;
  owner_id: number;
  uuid: string;
}

export interface User {
  hashed_password: string;
  id: string;
  username: string;
}

export interface Votes {
  id: Generated<number>;
  option_id: number;
  player_id: number;
  round_id: number;
  session_uuid: string;
  voted_at: Generated<string | null>;
}

export interface DB {
  auth_sessions: AuthSessions;
  options: Options;
  players: Players;
  rounds: Rounds;
  session: Session;
  sessions: Sessions;
  user: User;
  votes: Votes;
}
